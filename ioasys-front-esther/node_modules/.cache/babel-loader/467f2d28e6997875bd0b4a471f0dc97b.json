{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Azapfy\\\\Downloads\\\\ioasys-front-esther\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\Azapfy\\\\Downloads\\\\ioasys-front-esther\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\Azapfy\\\\Downloads\\\\ioasys-front-esther\\\\src\\\\atoms\\\\TextField\\\\index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Field, change } from \"redux-form\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport MuiTextField from \"@material-ui/core/TextField\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing.unit\n  }\n}));\nexport default function TextField(_ref) {\n  let show = _ref.show,\n      disabled = _ref.disabled,\n      id = _ref.id,\n      placeholder = _ref.placeholder,\n      data = _ref.data,\n      value = _ref.value,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? \"100px\" : _ref$width,\n      props = _objectWithoutProperties(_ref, [\"show\", \"disabled\", \"id\", \"placeholder\", \"data\", \"value\", \"width\"]);\n\n  const classes = useStyles();\n  return show ? React.createElement(FormControl, {\n    className: classes.formControl,\n    style: {\n      minWidth: width\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Field, Object.assign({\n    name: id,\n    disabled: disabled,\n    type: \"text\",\n    label: placeholder,\n    valueToSet: value\n  }, props, {\n    component: FieldComponent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }))) : null;\n}\n\nconst FieldComponent = ({\n  input,\n  label,\n  type,\n  meta: {\n    form,\n    dispatch\n  },\n  valueToSet\n}) => {\n  const name = input.name,\n        onChange = input.onChange;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        alreadySet = _useState2[0],\n        setAlreadySet = _useState2[1];\n\n  useEffect(() => {\n    if (!alreadySet) {\n      dispatch(change(form, name, valueToSet));\n      setAlreadySet(true);\n    }\n  }, [valueToSet]);\n  return React.createElement(MuiTextField, Object.assign({\n    label: label,\n    type: type,\n    fullWidth: true\n  }, input, {\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["C:/Users/Azapfy/Downloads/ioasys-front-esther/src/atoms/TextField/index.js"],"names":["React","useState","useEffect","Field","change","makeStyles","FormControl","MuiTextField","useStyles","theme","formControl","margin","spacing","unit","TextField","show","disabled","id","placeholder","data","value","width","props","classes","minWidth","FieldComponent","input","label","type","meta","form","dispatch","valueToSet","name","onChange","alreadySet","setAlreadySet"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,YAA9B;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AAEA,OAAOC,YAAP,MAAyB,6BAAzB;AAEA,MAAMC,SAAS,GAAGH,UAAU,CAACI,KAAK,KAAK;AACnCC,EAAAA,WAAW,EAAE;AACTC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAcC;AADb;AADsB,CAAL,CAAN,CAA5B;AAMA,eAAe,SAASC,SAAT,OASZ;AAAA,MARCC,IAQD,QARCA,IAQD;AAAA,MAPCC,QAOD,QAPCA,QAOD;AAAA,MANCC,EAMD,QANCA,EAMD;AAAA,MALCC,WAKD,QALCA,WAKD;AAAA,MAJCC,IAID,QAJCA,IAID;AAAA,MAHCC,KAGD,QAHCA,KAGD;AAAA,wBAFCC,KAED;AAAA,MAFCA,KAED,2BAFS,OAET;AAAA,MADIC,KACJ;;AACC,QAAMC,OAAO,GAAGf,SAAS,EAAzB;AAEA,SAAOO,IAAI,GACP,oBAAC,WAAD;AACI,IAAA,SAAS,EAAEQ,OAAO,CAACb,WADvB;AAEI,IAAA,KAAK,EAAE;AAAEc,MAAAA,QAAQ,EAAEH;AAAZ,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,oBAAC,KAAD;AACI,IAAA,IAAI,EAAEJ,EADV;AAEI,IAAA,QAAQ,EAAED,QAFd;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,KAAK,EAAEE,WAJX;AAKI,IAAA,UAAU,EAAEE;AALhB,KAMQE,KANR;AAOI,IAAA,SAAS,EAAEG,cAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJJ,CADO,GAeP,IAfJ;AAgBH;;AAED,MAAMA,cAAc,GAAG,CAAC;AACpBC,EAAAA,KADoB;AAEpBC,EAAAA,KAFoB;AAGpBC,EAAAA,IAHoB;AAIpBC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAJc;AAKpBC,EAAAA;AALoB,CAAD,KAMjB;AAAA,QACMC,IADN,GACyBP,KADzB,CACMO,IADN;AAAA,QACYC,QADZ,GACyBR,KADzB,CACYQ,QADZ;;AAAA,oBAGkCjC,QAAQ,CAAC,KAAD,CAH1C;AAAA;AAAA,QAGKkC,UAHL;AAAA,QAGiBC,aAHjB;;AAKFlC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACiC,UAAL,EAAiB;AACbJ,MAAAA,QAAQ,CAAC3B,MAAM,CAAC0B,IAAD,EAAOG,IAAP,EAAaD,UAAb,CAAP,CAAR;AACAI,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH;AACJ,GALQ,EAKN,CAACJ,UAAD,CALM,CAAT;AAOA,SACI,oBAAC,YAAD;AACI,IAAA,KAAK,EAAEL,KADX;AAEI,IAAA,IAAI,EAAEC,IAFV;AAGI,IAAA,SAAS;AAHb,KAIQF,KAJR;AAKI,IAAA,QAAQ,EAAEQ,QALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AASH,CA3BD","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Field, change } from \"redux-form\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nimport MuiTextField from \"@material-ui/core/TextField\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        margin: theme.spacing.unit\r\n    }\r\n}));\r\n\r\nexport default function TextField({\r\n    show,\r\n    disabled,\r\n    id,\r\n    placeholder,\r\n    data,\r\n    value,\r\n    width = \"100px\",\r\n    ...props\r\n}) {\r\n    const classes = useStyles();\r\n\r\n    return show ? (\r\n        <FormControl\r\n            className={classes.formControl}\r\n            style={{ minWidth: width }}\r\n        >\r\n            <Field\r\n                name={id}\r\n                disabled={disabled}\r\n                type=\"text\"\r\n                label={placeholder}\r\n                valueToSet={value}\r\n                {...props}\r\n                component={FieldComponent}\r\n            ></Field>\r\n        </FormControl>\r\n    ) : null;\r\n}\r\n\r\nconst FieldComponent = ({\r\n    input,\r\n    label,\r\n    type,\r\n    meta: { form, dispatch },\r\n    valueToSet\r\n}) => {\r\n    const { name, onChange } = input;\r\n\r\n    const [alreadySet, setAlreadySet] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!alreadySet) {\r\n            dispatch(change(form, name, valueToSet));\r\n            setAlreadySet(true);\r\n        }\r\n    }, [valueToSet]);\r\n\r\n    return (\r\n        <MuiTextField\r\n            label={label}\r\n            type={type}\r\n            fullWidth\r\n            {...input}\r\n            onChange={onChange}\r\n        />\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}